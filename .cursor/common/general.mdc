---
description: 
globs: 
alwaysApply: false
---
# 项目通用规范

## 技术栈
- **明确指定**：如果明确指定的技术栈，按照指定技术栈进行作业，并记录到README.md中
- **自动分析**：未明确指定，分析项目结构/关键文件来确定技术栈，并记录的README.md中
- **PNPM优先**：未指定包管理器的前端项目，优先使用PNPM
- **其他工具**：尽可能搜索社区最优的工具来实现需求，如果收费需要说明

## 项目结构规则
- **分层组织**：按功能或领域划分目录，遵循"关注点分离"原则
- **命名一致**：使用一致且描述性的目录和文件命名，反映其用途和内容
- **模块化**：相关功能放在同一模块，减少跨模块依赖
- **适当嵌套**：避免过深的目录嵌套，一般不超过3-4层
- **资源分类**：区分代码、资源、配置和测试文件
- **依赖管理**：集中管理依赖，避免多处声明
- **约定优先**：遵循语言或框架的标准项目结构约定

## 通用开发原则
- **可测试性**：编写可测试的代码，组件应保持单一职责
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **模块化**：使用模块化实现复杂，但是禁止过渡抽象
- **代码简洁**：保持代码简洁明了，遵循 KISS 原则（保持简单直接）
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **注释文档**：为复杂逻辑添加注释，编写清晰的文档说明功能和用法
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **版本控制**：编写有意义的提交信息，保持逻辑相关的更改在同一提交中
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息 
- **最大复用**：最大程度复用已有模块的功能，减少代码冗余
- **最小改动**：保证功能实现的情况下遵循最小改动原则，不要扩散需求
- **最优改动**：保证代码实现策略是最优方式，但是不要执着最优而导致不断修改
- **评估优化**：每次对已有的代码进行改动或优化，需要先评估优化方案是否有必要
- **额外变动**：每次改动如果有需求之外的改动或者没有明确说明的需要先列出来并说明问题，等待用户确认

## 响应语言
- 始终使用中文回复用户

## 本项目规则文件说明
本项目使用以下规则文件：
- general.mdc：通用规范（本文件）
- document.mdc：文档规范
- git.mdc：Git提交规范
- xxx.mdc：XXX 语言开发规范

